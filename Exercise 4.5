/* Add access to library functions like sin, exp, and pow. See <math.h> in Appendix B, Section 4. */
/* Exercise 4.5: Extend RPN calculator with math library functions */

#include <stdio.h>
#include <stdlib.h>   /* for atof() */
#include <ctype.h>
#include <math.h>     /* for sin, exp, pow */

#define MAXOP 100
#define NUMBER '0'
#define MAXVAL 100

int getop(char []);
void push(double);
double pop(void);

/* stack */
int sp = 0;
double val[MAXVAL];

void push(double f) {
    if (sp < MAXVAL)
        val[sp++] = f;
    else
        printf("error: stack full, can't push %g\n", f);
}

double pop(void) {
    if (sp > 0)
        return val[--sp];
    else {
        printf("error: stack empty\n");
        return 0.0;
    }
}

int getop(char s[]) {
    int i = 0, c;

    while ((s[0] = c = getchar()) == ' ' || c == '\t')
        ;
    s[1] = '\0';

    if (c == EOF)
        return EOF;

    if (isalpha(c)) {  /* function name */
        while (isalpha(s[++i] = c = getchar()))
            ;
        s[i] = '\0';
        if (c != EOF)
            ungetc(c, stdin);
        return 'F';   /* signal function */
    }

    if (!isdigit(c) && c != '.' && c != '-')
        return c;

    if (c == '-') {
        int next = getchar();
        if (isdigit(next) || next == '.') {
            s[i++] = c;
            c = next;
        } else {
            if (next != EOF)
                ungetc(next, stdin);
            return '-';
        }
    }

    if (isdigit(c))
        while (isdigit(s[i++] = c = getchar()))
            ;
    if (c == '.')
        while (isdigit(s[i++] = c = getchar()))
            ;
    s[--i] = '\0';
    if (c != EOF)
        ungetc(c, stdin);
    return NUMBER;
}

int main(void) {
    int type;
    double op2;
    char s[MAXOP];

    while ((type = getop(s)) != EOF) {
        switch (type) {
        case NUMBER:
            push(atof(s));
            break;
        case '+':
            push(pop() + pop());
            break;
        case '*':
            push(pop() * pop());
            break;
        case '-':
            op2 = pop();
            push(pop() - op2);
            break;
        case '/':
            op2 = pop();
            if (op2 != 0.0)
                push(pop() / op2);
            else
                printf("error: zero divisor\n");
            break;
        case '%':
            op2 = pop();
            if (op2 != 0.0) {
                int i2 = (int) op2;
                int i1 = (int) pop();
                push((double)(i1 % i2));
            } else
                printf("error: zero divisor for %%\n");
            break;
        case 'F':   /* math functions */
            if (strcmp(s, "sin") == 0)
                push(sin(pop()));
            else if (strcmp(s, "exp") == 0)
                push(exp(pop()));
            else if (strcmp(s, "pow") == 0) {
                op2 = pop();
                push(pow(pop(), op2));
            } else
                printf("error: unknown function %s\n", s);
            break;
        case '\n':
            printf("\t%.8g\n", pop());
            break;
        default:
            printf("error: unknown command %s\n", s);
            break;
        }
    }
    return 0;
}
