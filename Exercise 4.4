/* Add commands to print the top element of the stack without popping, to duplicate it, and to swap the top two elements. Add a command to clear the stack. */
/* Exercise 4.4: Extend RPN calculator with stack commands */

#include <stdio.h>
#include <stdlib.h>   /* for atof() */
#include <ctype.h>

#define MAXOP 100     /* max size of operand/operator */
#define NUMBER '0'    /* signal that a number was found */
#define MAXVAL 100    /* maximum depth of val stack */

int getop(char []);
void push(double);
double pop(void);
void print_top(void);
void duplicate(void);
void swap(void);
void clear(void);

/* stack for operands */
int sp = 0;            /* next free stack position */
double val[MAXVAL];    /* value stack */

/* push: push f onto value stack */
void push(double f) {
    if (sp < MAXVAL)
        val[sp++] = f;
    else
        printf("error: stack full, can't push %g\n", f);
}

/* pop: pop and return top value from stack */
double pop(void) {
    if (sp > 0)
        return val[--sp];
    else {
        printf("error: stack empty\n");
        return 0.0;
    }
}

/* print top element of stack */
void print_top(void) {
    if (sp > 0)
        printf("Top of stack: %g\n", val[sp - 1]);
    else
        printf("error: stack empty\n");
}

/* duplicate top element */
void duplicate(void) {
    if (sp > 0) {
        double top = val[sp - 1];
        push(top);
    } else
        printf("error: stack empty, can't duplicate\n");
}

/* swap top two elements */
void swap(void) {
    if (sp >= 2) {
        double temp = val[sp - 1];
        val[sp - 1] = val[sp - 2];
        val[sp - 2] = temp;
    } else
        printf("error: not enough elements to swap\n");
}

/* clear stack */
void clear(void) {
    sp = 0;
}

/* getop: get next operator or numeric operand */
int getop(char s[]) {
    int i = 0, c;

    while ((s[0] = c = getchar()) == ' ' || c == '\t')
        ;
    s[1] = '\0';

    if (c == EOF)
        return EOF;

    if (!isdigit(c) && c != '.' && c != '-')
        return c;

    if (c == '-') {
        int next = getchar();
        if (isdigit(next) || next == '.') {
            s[i++] = c;
            c = next;
        } else {
            if (next != EOF)
                ungetc(next, stdin);
            return '-';
        }
    }

    if (isdigit(c))
        while (isdigit(s[i++] = c = getchar()))
            ;
    if (c == '.')
        while (isdigit(s[i++] = c = getchar()))
            ;
    s[--i] = '\0';
    if (c != EOF)
        ungetc(c, stdin);
    return NUMBER;
}

int main(void) {
    int type;
    double op2;
    char s[MAXOP];

    while ((type = getop(s)) != EOF) {
        switch (type) {
        case NUMBER:
            push(atof(s));
            break;
        case '+':
            push(pop() + pop());
            break;
        case '*':
            push(pop() * pop());
            break;
        case '-':
            op2 = pop();
            push(pop() - op2);
            break;
        case '/':
            op2 = pop();
            if (op2 != 0.0)
                push(pop() / op2);
            else
                printf("error: zero divisor\n");
            break;
        case '%':
            op2 = pop();
            if (op2 != 0.0) {
                int i2 = (int) op2;
                int i1 = (int) pop();
                push((double)(i1 % i2));
            } else
                printf("error: zero divisor for %%\n");
            break;
        case 'p':   /* print top */
            print_top();
            break;
        case 'd':   /* duplicate */
            duplicate();
            break;
        case 's':   /* swap */
            swap();
            break;
        case 'c':   /* clear */
            clear();
            break;
        case '\n':
            printf("\t%.8g\n", pop());
            break;
        default:
            printf("error: unknown command %s\n", s);
            break;
        }
    }
    return 0;
}
